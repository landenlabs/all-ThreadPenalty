// ThreadPenalty app module build.gradle
plugins {
    id ("com.android.application")
    id ("org.jetbrains.kotlin.android")     // Prevents duplicate kotlin warnings
}

android {
    compileSdk 36
    namespace 'com.landenlabs.allThreadPenalty'

    defaultConfig {
        applicationId "com.landenlabs.all_threadPenalty"
        minSdkVersion 26
        targetSdkVersion 36

        versionCode 30731
        versionName '3.07.31'

        // Limit languages to following list.
        resourceConfigurations += ['en', 'es']

        buildConfigField "long", "BuildTimeMilli", System.currentTimeMillis() + "L"
    }

    // Save app version in string so resource can be used in layouts
    applicationVariants.configureEach { variant ->
        variant.resValue "string", "versionName", "v" + variant.versionName
    }

    gradle.projectsEvaluated {
        tasks.withType(JavaCompile).tap {
            configureEach {
                // Enable verbose lint reporting during build.
                options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
            }
        }
    }

    signingConfigs {
        release  // populated below
    }

    // Load signing config (does not work for command line builds)
    // println("Setting release=${rootDir}/release.properties")
    if (file("${rootDir}/release.properties").exists()) {
        def props = new Properties()
        props.load(new FileInputStream(file("${rootDir}/release.properties")))
        android.signingConfigs.release.storeFile = file(props.keyStore)
        android.signingConfigs.release.storePassword = props.keyStorePassword
        android.signingConfigs.release.keyAlias = props.keyAlias
        android.signingConfigs.release.keyPassword = props.keyAliasPassword
        println("Setting release to " + signingConfigs.release.storeFile.absolutePath )
    }

    buildFeatures.buildConfig = true

    buildTypes {
        release {
            // Enables code shrinking, obfuscation, and optimization.
            minifyEnabled true

            // List of resources removed at end of generated mapping file:
            // grep unused ./app/build/outputs/mapping/demoRelease/resources.txt
            shrinkResources true

            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release

            // Limit languages to following list.
            ndk {
                // abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
                abiFilters 'armeabi-v7a', 'arm64-v8a'
            }
        }
    }

    // Save app version in string so resource can be used in layouts
    applicationVariants.configureEach { variant ->
        variant.resValue "string", "versionName", "v" + variant.versionName
    }

    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
        }
    }
}

dependencies {
    // implementation 'androidx.annotation:annotation:1.5.0'
    implementation 'androidx.appcompat:appcompat:1.7.1'
    implementation 'com.google.android.material:material:1.12.0'
    //implementation 'androidx.legacy:legacy-support-v4:1.0.0'

    implementation 'androidx.navigation:navigation-fragment:2.9.3'
    implementation 'androidx.navigation:navigation-ui:2.9.3'

    // Line Graph https://github.com/jjoe64/GraphView
    implementation 'com.jjoe64:graphview:4.2.2'
}

// Rename app
//  {project}-{flavor}-{buildType}.apk -> {parentProject}-{versionNameSuffix}-{buildType}-{versionStr}.apk
//  Ex:
//           app-release.apk -> threadpenalty-release-1.02.3456.apk
//           app-release.aab -> threadpenalty-release-1.4.27.aab
android.applicationVariants.configureEach {
    variant -> variant.outputs.configureEach {
        def ourname = project.parent.name
        def buildType = outputFileName.replaceAll(".*(debug|release).*", '$1')
        def versionStr = versionName.replaceAll("-.*", "")
        def flavor = variant.mergedFlavor.versionNameSuffix.toString().replace("null", "")
        // ext.flavorName = variant.name
        def newNameRoot = "${ourname}${flavor}-${buildType}-${versionStr}"
        outputFileName = "${newNameRoot}.apk"

        // sign{flavor}{buildType}Bundle
        //   Ex: signAppDebugBundle
        def bundleFinalizeTaskName = "sign${variant.name.capitalize()}Bundle"
        tasks.named(bundleFinalizeTaskName) {
            def file = finalBundleFile.asFile.get()
            def finalFile = new File(file.parentFile, "${newNameRoot}.aab")
            finalBundleFile.set(finalFile)
        }
    }
}

tasks.register('listFlavors') {
    description = 'List threadpenalty flavors'
    doLast {
        println("--- threadpenalty Flavors ---")
        /*
        android.productFlavors.all {
            flavor -> println("  " + flavor.name + "\t" + android.defaultConfig.applicationId + flavor.applicationIdSuffix)
        }
         */
        printf("   %-20s %-20s %-40s   %s\n", "--Package--", "--Name--", "--Description/Flavor--", "--isMinified--")
        project.android.applicationVariants.all { variant ->
            // def applicationId = [variant.mergedFlavor.applicationId, variant.buildType.applicationIdSuffix].findAll().join()
            printf("   %-20s %-20s %-40s   %b\n", variant.getApplicationId(), variant.name, variant.description, variant.buildType.isMinifyEnabled())
        }
    }
}

tasks.register('listrepos') {
    description = 'List threadpenalty repositories'
    doLast {
        println "threadpenalty Repositories:"
        project.repositories.each { printf("  %15s %s\n", it.name, it.url) }
    }
}

tasks.register('deepClean' /*, Delete */) {
    description = 'Delete c++ temp files'
    doLast {
        println "Delete ${layout.buildDirectory.get()}"
        delete layout.buildDirectory.get()
        // delete rootProject.buildDir
        // delete "${buildDir}/someFile"
        println "Delete ${projectDir}/.cxx"
        delete "${projectDir}/.cxx"
    }
}